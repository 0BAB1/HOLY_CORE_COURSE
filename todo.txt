=> BRH's todo list for the project
=> Who needs a web app for this, serioulsy ?

===================
DONE
===================

Add new cache components & tb base
and then make it "work" (lol)
make lots of tb for cache, use an axi ext cocotb + axi translator
make an axi arbitrer, less etricate tb but still some bs axi translator
add mem_read that we didn't had before (adapt & retest control unit)
integrate new logic block (mem deprecated, replace by) + add signals + arbitrer
TB:
make a test harness environement
find a way to init an external memory
adapt tb to wait on cache stall
adapt tb signals assertion for new test harness
add more holy tests for cache misses
integrate all in pytest, make all the deisng coherent and run flawlessly
interface AXI in vivado correctly
Init JTAG to MAster FPGA - LED (JTAG init)
ADD DEBUG SIGNALS
CHANGE ARBITRER DEFAULT VALUES
RUN ON SIGLE CLOCK (and test it first in simulation, as I did sims on async clocks)
Run on FPGA - Blink LED using instructions fed in HOLY CORE
REDO ALL TESTS with better seq logic on next cahce dirty...
Check how low can the timing can close (50, 75 ,100 , ... ?) => 50 will do it for now.
prepare tutorials (md) and pdfs (clean)
Compile actual assembly for the cpu mem files
Implement CSR for better dev experience (cache flush Zicsr)
Simple sensor read on IIC. (note : that was a pain and vendor specific, we NEED libraries support)
Compile programs from C. Be able to use picolibc.
Add a IIC bare metal ASM exmple at the end of FPGA edition (bonus)
Add halfword / byte writes / reads to non cachable range !

===================
DOING
===================

Software edition
    Clean codebase, add params, simplyfy data cache
    Add gdb support
    Add trap handling (crss...)
    Add an SD card controller in the SoC, make a bootloader.

=======================
NOT DONE - TODO MILESTONES
=======================

MAKE user docs (next logical step after quick start guides)

OS EDITION:
    Port RTOS on the core

DRONE:
    Control a dron's flight

PIELINED EDITION :
    Make a 2 stages pipeline.
    (objective : 80MHz).

=======================
NOT DONE - SIDEQUESTS
=======================

Port on Arty S7 (spartan S7 + pmod SD)

Make basic AXI ICC drivers for holy core (hc_lib)
    
AXI wresp & rresp error handling (special trap handler ?).

=======================
NOT DONE - FORGOTTEN
=======================

Holy C support would be insane. (or is it ?)
Figure out this tlast bug in simulation => Note 05/25 : SoC works fine without for now and it's only affecting simulation