===================
DONE
===================

Add new cache components & tb base
and then make it "work" (lol)
make lots of tb for cache, use an axi ext cocotb + axi translator
make an axi arbitrer, less etricate tb but still some bs axi translator
add mem_read that we didn't had before (adapt & retest control unit)
integrate new logic block (mem deprecated, replace by) + add signals + arbitrer
TB:
make a test harness environement
find a way to init an external memory
adapt tb to wait on cache stall
adapt tb signals assertion for new test harness
add more holy tests for cache misses
integrate all in pytest, make all the deisng coherent and run flawlessly
interface AXI in vivado correctly
Init JTAG to MAster FPGA - LED (JTAG init)
ADD DEBUG SIGNALS
CHANGE ARBITRER DEFAULT VALUES
RUN ON SIGLE CLOCK (and test it first in simulation, as I did sims on async clocks)
Run on FPGA - Blink LED using instructions fed in HOLY CORE
REDO ALL TESTS with better seq logic on next cahce dirty...
Check how low can the timing can close (50, 75 ,100 , ... ?) => 50 will do it for now.

===================
DOING
===================

Make more sophisticacted programs, use a compiler.
Add AXI lite bypasser (with configurable memory range for MMIO)

...

=======================
NOT DONE - MILESTONES
=======================


DO CDC matter

UART tb

Compile actual assembly for the cpu mem files


=======================
NOT DONE - SIDEQUESTS
=======================

figure our this tlast bug in simulation

AXI wresp & rresp error handling.

make things lot cleaner

prepare tutorials (md) and pdfs (clean)
