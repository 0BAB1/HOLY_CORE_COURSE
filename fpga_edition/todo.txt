===================
DONE
===================

Add new cache components & tb base
and then make it "work" (lol)
make lots of tb for cache, use an axi ext cocotb + axi translator
make an axi arbitrer, less etricate tb but still some bs axi translator
add mem_read that we didn't had before (adapt & retest control unit)
integrate new logic block (mem deprecated, replace by) + add signals + arbitrer
TB:
make a test harness environement
find a way to init an external memory
adapt tb to wait on cache stall
adapt tb signals assertion for new test harness
add more holy tests for cache misses
integrate all in pytest, make all the deisng coherent and run flawlessly
interface AXI in vivado correctly
Init JTAG to MAster FPGA - LED (JTAG init)
ADD DEBUG SIGNALS
CHANGE ARBITRER DEFAULT VALUES
RUN ON SIGLE CLOCK (and test it first in simulation, as I did sims on async clocks)
Run on FPGA - Blink LED using instructions fed in HOLY CORE
REDO ALL TESTS with better seq logic on next cahce dirty...
Check how low can the timing can close (50, 75 ,100 , ... ?) => 50 will do it for now.
prepare tutorials (md) and pdfs (clean)
Compile actual assembly for the cpu mem files
Implement CSR for better dev experience (cache flush Zicsr)

===================
DOING
===================

Implement CSR counters (Zicntr)

Compile programs from C.

=======================
NOT DONE - TODO MILESTONES
=======================


Add an SD card controller in the SoC, make a bootloader.

Add basic utilities in a HOLY LIBRAIRY. (cache hadling, get counters, simplified MMIO access)

Use the sensors, make a drone takeoff and stable (at least on the Z axis).

Update the PDFs, the ref tables (with all csr and new imm signals and csr control signals)

Once everything is done, split the core and PIPELINE it (objective : 80MHz).

MAKE user docs (next logical step after quick start guides)

=======================
NOT DONE - SIDEQUESTS
=======================

add halfword / byte writes / reads to non cachable range !

figure out this tlast bug in simulation

AXI wresp & rresp error handling.

What about Holy C
